module:
    description: >

    depends:  Platform
    download: https://deac-ams.dl.sourceforge.net/project/maxlauncher/MaxLauncher/1.31.0.0/maxlauncher_1.31.0.0_portable.zip

    configure:
        - #[module.destination]\app.cfg

    startup: |
        REM --- #[module.name]
        SETLOCAL
        SET TEMP_HERE=%cd%
        cd /D #[module.environment]
        start MaxLauncher.exe
        cd /D %TEMP_HERE%
        ENDLOCAL

    script: |
        const buttonTemplate = (() => {
            const templateFile = Workspace.getModuleDestinationDirectory("/environment.mld")
            const templateFileContent = fs.readFileSync(templateFile).toString()
            const templateButtonPattern = /<button>[\s\S]+<\/button>/ig
            fs.writeFileSync(templateFile, templateFileContent.replace(templateButtonPattern, ""), {flag: "w"})
            return templateFileContent.match(templateButtonPattern)[0]
        })()

        const createTabButtons = (module) => {

            if (module.meta.workspace
                    && !module.meta.execute)
                module.meta.workspace = path.normalize(path.dirname(module.meta.execute))

            let buttonContent = buttonTemplate

            const iconFileNamePattern = new RegExp("(?:^.*(?=,\\d+))|(?:^.*$)")
            const iconFileIndexPattern = new RegExp("(?<=,)\\d+$")

            const fillElement = (element, value) => {
                const pattern = new RegExp("(?<=<(" + element + ")>).*?(?=</\\1>)", "ig")
                if (Array.isArray(value))
                    value = value[0]
                if (value !== undefined
                        && value !== null)
                    buttonContent = buttonContent.replace(pattern, value)
            }

            fillElement("tab_id", module.meta.tab)
            fillElement("id", module.meta.button)
            fillElement("iconfile", iconFileNamePattern.exec(module.meta.icon || ""))
            fillElement("iconindex", iconFileIndexPattern.exec(module.meta.icon || ""))
            fillElement("text", module.meta.text)
            fillElement("filename", module.meta.execute)
            fillElement("arguments", module.meta.arguments)
            fillElement("workingdirectory", module.meta.workspace)

            return buttonContent
        }

        const migrateTabButtons = (tabId, modules) => {
            const templateFile = Workspace.getModuleDestinationDirectory("/environment.mld")
            const templateFileContent = fs.readFileSync(templateFile).toString()
            const templateTabPattern = new RegExp("(<tab>[\\s\S]+?<id>" + tabId + "</id>[\\s\\S]+?</text>)", "i")
            const tabButtons = modules
                .filter(module => module.meta && module.meta.tab === tabId)
                .map(module => createTabButtons(module))
                .join("")
            fs.writeFileSync(templateFile, templateFileContent.replace(templateTabPattern, "$1" + tabButtons), {flag: "w"})
        }

        migrateTabButtons(1, Workspace.getVariable("workspace.modules"))
        migrateTabButtons(2, Workspace.getVariable("workspace.modules"))
        migrateTabButtons(3, Workspace.getVariable("workspace.modules"))

monitoring:
    url:     https://maxlauncher.sourceforge.io/downloads.html
    pattern: